#### 卡顿是如何造成的

1、外部原因

在主线程里进行网络访问或者IO操作

2、View本身的卡顿

可以使用Allocation Tracing来定位大致的情况
然后可以使用TraceView来确定详细的问题所在

#### 内存抖动

在短时间内分配大量内存并经行大量GC操作

#### 渲染机制

屏幕理想帧率：60fps：每秒绘制帧数；

在60fps帧率下，每一秒只能停留16ms；

VSYNC(垂直刷新/绘制)：
- Refresh Rate:屏幕在一秒内刷新屏幕的次数--由硬件参数决定，比如60Hz
- Frame Rate:GPU一秒内绘制操作的帧数，如：60fps

GPU刷新：GPU帮助我们将UI组件等计算成纹理Texture和三维图形Polygons,同时
会使用OpenGL--会将纹理和三维图形缓存在GPU内存里面

在渲染机制里比较耗时的操作：

1、cpu计算时间：
从减轻加工View对象成Polyons和Texture下手优化。很多无用的View不会显示在屏幕上面，
一旦触发测量和布局操作，就会拖累应用的性能表现。

2、CPU将计算好的Texture和Polygons传递到GPU

OpenGL ES API允许数据到GPU后，可以对数据进行保存，做了缓存

3、GPU进行栅格化

渲染性能优化就是尽可能地上传数据到GPU，然后尽可能长地在不修改的情况下保存数据。

#### 渲染优化

1、尽可能避免过度绘制
- 背景经常造成过度绘制：
由于背景设置了颜色，同时又用到了MeterialDesign的主题会默认给一个背景（将主题添加的背景去掉）
getWindow().setBackgroundDrawable(null)
- 自定义控件如何处理过度绘制：
通过裁剪来处理

- 布局优化：

1）、当我们的布局是用FrameLayout的时候，可以改成merge

可以避免自己的帧布局和系统的ContentFrameLayout布局重叠造成重复计算（measure和layout）

2）、

#### Hierarchy View

Android Device Monitor

可以查看页面布局层级以及查看每个布局的measure,layout,draw的时间。
三个原点分别代表测量，布局，绘制这三个阶段的性能表现：

1）、绿色：渲染的管道阶段，这个视图的渲染速度至少快于一半的其他视图

2）、黄色：渲染速度比较慢的50%

3）、红色：渲染速度非常慢



